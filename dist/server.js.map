{"version":3,"sources":["../server/server.js"],"names":["install","app","use","static","json","process","env","NODE_ENV","webpack","require","webpackDevMiddleware","webpackHotMiddleware","config","entry","push","plugins","HotModuleReplacementPlugin","bundler","noInfo","log","console","get","req","res","db","collection","find","toArray","then","metadata","total_count","issues","length","_metadata","records","catch","error","status","message","post","newIssue","body","created","Date","err","validateIssue","insertOne","_id","result","insertedId","limit","next","connect","connection","listen"],"mappings":"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","file":"server.js","sourcesContent":["import SourceMapSupport from 'source-map-support';\r\nimport 'babel-polyfill';\r\nimport express from 'express';\r\nimport bodyParser from 'body-parser';\r\nimport { MongoClient } from 'mongodb';\r\nimport Issue from './issue.js';\r\n\r\nSourceMapSupport.install();\r\n\r\nconst app = express();\r\napp.use(express.static('static'));\r\napp.use(bodyParser.json());\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n  const webpack = require('webpack');\r\n  const webpackDevMiddleware = require('webpack-dev-middleware');\r\n  const webpackHotMiddleware = require('webpack-hot-middleware');\r\n\r\n  const config = require('../webpack.config');\r\n  config.entry.app.push('webpack-hot-middleware/client', 'webpack/hot/only-dev-server');\r\n  config.plugins.push(new webpack.HotModuleReplacementPlugin());\r\n\r\n  const bundler = webpack(config);\r\n  app.use(webpackDevMiddleware(bundler, { noInfo: true }));\r\n  app.use(webpackHotMiddleware(bundler, { log: console.log }));\r\n}\r\n\r\napp.get('/api/issues', (req, res) => {\r\n  db.collection('issues').find().toArray().then(issues => {\r\n    const metadata = { total_count: issues.length };\r\n    res.json({ _metadata: metadata, records: issues })\r\n  }).catch(error => {\r\n    console.log(error);\r\n    res.status(500).json({ message: `Internal Server Error: ${error}` });\r\n  });\r\n});\r\n\r\napp.post('/api/issues', (req, res) => {\r\n  const newIssue = req.body;\r\n  newIssue.created = new Date();\r\n  if (!newIssue.status)\r\n    newIssue.status = 'New';\r\n\r\n  const err = Issue.validateIssue(newIssue);\r\n  if (err) {\r\n    res.status(422).json({ message: `Invalid request: ${err}` });\r\n    return;\r\n  }\r\n\r\n  db.collection('issues').insertOne(newIssue).then(result =>\r\n    db.collection('issues').find({ _id: result.insertedId }).limit(1).next()\r\n  ).then(newIssue => {\r\n    res.json(newIssue);\r\n  }).catch(error => {\r\n    console.log(error);\r\n    res.status(500).json({ message: `Internal Server Error: ${error}` });\r\n  });\r\n});\r\n\r\nlet db;\r\nMongoClient.connect('mongodb://localhost/issuetracker').then(connection => {\r\n  db = connection;\r\n  app.listen(3000, () => {\r\n    console.log('App started on port 3000');\r\n  });\r\n}).catch(error => {\r\n  console.log('ERROR:', error);\r\n});"]}